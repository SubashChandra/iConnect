(dp1
S'output'
p2
S"<type 'exceptions.AttributeError'> "
p3
sS'layer'
p4
S'/Users/subash/Dropbox/MTechSem1/1_ScriptingAndComputingEnv/web2py/applications/iConnect/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a sample controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n#########################################################################\n\ndef index():\n    if auth.user!=None:\n        redirect(URL(\'default\',\'homeFree\'))\n    return locals()\n\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/manage_users (requires membership in\n    http://..../[app]/default/user/bulk_register\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    return dict(form=auth())\n\n\n#home page for a free user\n@auth.requires_login()\ndef homeFree():\n    if auth.user.first_name==\'admin\':\n        redirect(URL(\'default\',\'admin\'))\n    message="hello. dis is your home page"\n    row=db(db.auth_user.id==auth.user.id).select().first()\n    if row.premium==\'1\':\n        redirect(URL(\'default\',\'homePremium\'))\n    userName=auth.user.first_name\n    query=(auth.user.gender!=db.auth_user.gender) & (db.auth_user.religion==auth.user.religion) & (db.auth_user.caste==auth.user.caste)\n    rows=db(query).select()\n    return locals() \n\n#home page for a premium user\n@auth.requires_login()\ndef homePremium():\n    message ="this is home page of a premium user"\n    userName=auth.user.first_name\n    matches = {}\n    query=(auth.user.gender!=db.auth_user.gender) & (db.auth_user.religion==auth.user.religion) & (db.auth_user.caste==auth.user.caste)\n    rows=db(query).select()\n    myInter=db(db.Interests.userId==auth.user.id).select().first()\n    for row in rows:\n        if row.premium==\'1\':\n            tempRow=db(db.Interests.userId==row.id).select().first()\n            if(tempRow.Reading==myInter.Reading):\n                if row.id not in matches:\n                    matches[row.id]=1\n                else:\n                    matches[row.id]=matches[row.id]+1\n\n            if(tempRow.Music==myInter.Music):\n                if row.id not in matches:\n                    matches[row.id]=1\n                else:\n                    matches[row.id]=matches[row.id]+1\n\n            if(tempRow.Movies==myInter.Movies):\n                if row.id not in matches:\n                    matches[row.id]=1\n                else:\n                    matches[row.id]=matches[row.id]+1\n\n            if(tempRow.Travelling==myInter.Travelling):\n                if row.id not in matches:\n                    matches[row.id]=1\n                else:\n                    matches[row.id]=matches[row.id]+1\n\n            if(tempRow.Fitness==myInter.Fitness):\n                if row.id not in matches:\n                    matches[row.id]=1\n                else:\n                    matches[row.id]=matches[row.id]+1\n\n\n        if row.diet==auth.user.diet:\n            if row.id not in matches:\n                matches[row.id]=1\n            else:\n                matches[row.id]=matches[row.id]+1\n\n        if row.smoke==auth.user.smoke:\n            if row.id not in matches:\n                matches[row.id]=1\n            else:\n                matches[row.id]=matches[row.id]+1\n\n        if row.drink==auth.user.drink:\n            if row.id not in matches:\n                matches[row.id]=1\n            else:\n                matches[row.id]=matches[row.id]+1\n\n        if row.bodyType==auth.user.bodyType:\n            if row.id not in matches:\n                matches[row.id]=1\n            else:\n                matches[row.id]=matches[row.id]+1\n\n        if row.skinTone==auth.user.skinTone:\n            if row.id not in matches:\n                matches[row.id]=1\n            else:\n                matches[row.id]=matches[row.id]+1\n    mIds=[]\n    mCount=[]\n    for i in matches:\n        mIds.append(i)\n        mCount.append(matches[i])\n    \n\n    i=0\n    while i<len(mCount):\n        j=0\n        while j<len(mCount)-1:\n            if mCount[j]<mCount[j+1]:\n                temp=mCount[j]\n                mCount[j]=mCount[j+1]\n                mCount[j+1]=temp\n\n                temp=mIds[j]\n                mIds[j]=mIds[j+1]\n                mIds[j+1]=temp\n            j=j+1\n        i=i+1\n    return locals()\n\n\n#profile view of a free user \n@auth.requires_login()\ndef myProfileFree():\n    if auth.user.first_name==\'admin\':\n        redirect(URL(\'default\',\'admin\'))\n    row=db(db.auth_user.id==auth.user.id).select().first()\n    if row.premium==\'1\':\n        redirect(URL(\'default\',\'myProfilePremium\'))\n    myInfo=auth.user\n    return locals()\n\n\n#profile view of a premium user who has filled additional info\n@auth.requires_login()\ndef myProfilePremium():\n    myInfo=auth.user\n    myIntr=db(db.Interests.userId==auth.user.id).select().first()\n    return locals()\n\n\n#suggested profile visibilty for a free user\n@auth.requires_login()\ndef freeProfile():\n    row=db(db.auth_user.id==request.args[0]).select().first()\n    if row.premium==\'1\':\n        redirect(URL(\'default\',\'premiumProfile\',args=request.args))\n    userInfo=db(db.auth_user.id==request.args[0]).select()\n    return locals()\n\n#suggested profile visibility for a premium user\n@auth.requires_login()\ndef premiumProfile():\n    userInfo=db(db.auth_user.id==request.args[0]).select()\n    userIntr=db(db.Interests.userId==request.args[0]).select().first()\n    myIntr=db(db.Interests.userId==auth.user.id).select().first()\n    myInfo=auth.user\n    return locals()\n\n\ndef myValidation(form):\n    form.vars.userId=auth.user.id\n\n\n\n@auth.requires_login()\ndef goPremium():\n    if auth.user.first_name==\'admin\':\n        redirect(URL(\'default\',\'admin\'))\n    form=SQLFORM(db.Interests)\n\n    if form.process(onvalidation=myValidation).accepted:\n        row = db(db.auth_user.id==auth.user.id).select().first()\n        row.update_record(premium=\'1\')\n        auth.user.premium=1\n        email=auth.user.email\n        if mail.send(to=[email],subject=\'Re: Premium Trail Activated (iConnect)\',message=\'Dear User, Your premium account trail period has been activated. Expires in 1 month.\'):\n            response.flash = \'email sent\'\n        else:\n            response.flash = \'sent failed\'\n\n        \n        redirect(URL(\'homePremium\'))\n    return locals()\n\n\n\n\n#making dummy payment\n@auth.requires_login()\ndef payment():\n    if auth.user.first_name==\'admin\':\n        redirect(URL(\'default\',\'admin\'))\n    return locals()\n\n\n#handling likes\ndef onLike():\n    row = db(db.auth_user.id==request.args[0]).select().first()\n    likes=row.likes\n    likes=likes+1\n    row.update_record(likes=likes)\n    return " "+str(likes)\n\n#handling spams\ndef onSpam():\n    row = db(db.auth_user.id==request.args[0]).select().first()\n    spams=row.spams\n    spams=spams+1\n    row.update_record(spams=spams)\n    return " "+str(spams)\n\n\n#wishlist \n@auth.requires_login()\ndef wishList():\n    if auth.user.first_name==\'admin\':\n        redirect(URL(\'default\',\'admin\'))\n    rows=db(db.WishlistTable.userId==auth.user.id).select()\n    myList=[]\n    for row in rows:\n        if row.wId not in myList:\n            myList.append(row.wId)\n\n    return locals()\n\n\n#add users to wishList\ndef addToWishlist():\n    wId=request.args[0]\n    userId=auth.user.id;\n    rows =db.WishlistTable.select(userId=userId,wId=wId);\n    if len(rows)==0:\n        db.WishlistTable.insert(userId=userId,wId=wId);\n        response.flash=\'Added to Wishlist\'\n    else:\n        response.flash="Already in yourt Wishlist"\n\n\n\n#admin begin ********\n\ndef admin():\n    user_table = None\n    interests_table = None\n    if request.args(0) == "auth_user":\n        user_table = SQLFORM.smartgrid(db.auth_user)\n    elif request.args(0) == "interests" or request.args(0) == "Interests":\n        interests_table = SQLFORM.smartgrid(db.Interests)\n    return locals()\n\n\n#admin end ****\n\n\n\n#send maild\ndef sendMail():\n    row = db(db.auth_user.id==request.args[0]).select().first()\n    fname=row.first_name\n    lname=row.last_name\n    mailId=row.email\n    form=SQLFORM.factory(Field(\'Subject\',\'string\',requires=IS_NOT_EMPTY()),Field(\'Body\',\'text\',requires=IS_NOT_EMPTY()))\n    \n    if form.accepts(request,session):\n        subject=form.vars.Subject\n        body=form.vars.Body\n        email=row.email\n        if mail.send(to=[email],subject=subject,message=body):\n            response.flash = \'email sent\'\n        else:\n            response.flash = \'sent failed\'\n        redirect(URL(\'default\',\'premiumProfile\',args=[request.args[0]]))\n\n    return locals()\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\n\n\nresponse._vars=response._caller(addToWishlist)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/Users/subash/Dropbox/MTechSem1/1_ScriptingAndComputingEnv/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/Users/subash/Dropbox/MTechSem1/1_ScriptingAndComputingEnv/web2py/applications/iConnect/controllers/default.py", line 321, in <module>\n  File "/Users/subash/Dropbox/MTechSem1/1_ScriptingAndComputingEnv/web2py/gluon/globals.py", line 412, in <lambda>\n    self._caller = lambda f: f()\n  File "/Users/subash/Dropbox/MTechSem1/1_ScriptingAndComputingEnv/web2py/applications/iConnect/controllers/default.py", line 256, in addToWishlist\n    rows =db.WishlistTable.select(userId=userId,wId=wId);\n  File "/Users/subash/Dropbox/MTechSem1/1_ScriptingAndComputingEnv/web2py/gluon/packages/dal/pydal/helpers/classes.py", line 30, in __getattr__\n    raise AttributeError\nAttributeError\n'
p11
s.